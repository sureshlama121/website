

import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Dell
 */
public class HotelInfo extends javax.swing.JFrame {
// this is changed
    /**
     * Creates new form HotelInfo
     */
    String userType;
    ArrayList<String> table_data = new ArrayList<>();
    ArrayList<Integer> price = new ArrayList<>();
    DefaultTableModel model;
    boolean combobox_repeat = false;
    boolean search_repeat = false;
    
    public HotelInfo() {
        initComponents();
     
    }
    public HotelInfo(String userType) {
        initComponents();
        this.userType = userType;
     if(userType =="user"){
         modificationPanel.setVisible(false);
         openFile("user");
     }
         }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        acGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        modificationPanel = new javax.swing.JPanel();
        floorCombo = new javax.swing.JComboBox<>();
        typeCombo1 = new javax.swing.JComboBox<>();
        roomPriceField = new javax.swing.JTextField();
        roomNumField = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        deleteButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        yesRadio = new javax.swing.JRadioButton();
        noRadio = new javax.swing.JRadioButton();
        searchButton = new javax.swing.JButton();
        titleLabel = new javax.swing.JLabel();
        priceField = new javax.swing.JTextField();
        typeCombo = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        roomInfo = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        resetButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hotel Info");

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));
        jPanel1.setForeground(new java.awt.Color(204, 204, 204));

        modificationPanel.setBackground(new java.awt.Color(255, 255, 204));

        floorCombo.setBackground(new java.awt.Color(255, 51, 51));
        floorCombo.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        floorCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " Select Floor", "1st", "2nd", "3rd", "4th", "5th" }));
        floorCombo.setBorder(null);
        floorCombo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        floorCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                floorComboActionPerformed(evt);
            }
        });

        typeCombo1.setBackground(new java.awt.Color(255, 51, 51));
        typeCombo1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        typeCombo1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " Select Room Type", " Single ", " Double", " Family", " Suite", " Deulxe" }));
        typeCombo1.setBorder(null);
        typeCombo1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        typeCombo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeCombo1ActionPerformed(evt);
            }
        });

        roomPriceField.setBackground(new java.awt.Color(255, 255, 204));
        roomPriceField.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Room Price", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Century Gothic", 1, 12))); // NOI18N

        roomNumField.setBackground(new java.awt.Color(255, 255, 204));
        roomNumField.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Room No", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Century Gothic", 1, 12))); // NOI18N

        jPanel3.setBackground(new java.awt.Color(255, 255, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Modify Table"));

        deleteButton.setBackground(java.awt.Color.red);
        deleteButton.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        addButton.setBackground(java.awt.Color.green);
        addButton.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        saveButton.setBackground(java.awt.Color.blue);
        saveButton.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        saveButton.setForeground(new java.awt.Color(255, 255, 204));
        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 204));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel1.setText("Air Conditioner:");

        yesRadio.setBackground(new java.awt.Color(255, 255, 204));
        acGroup.add(yesRadio);
        yesRadio.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        yesRadio.setText("YES");
        yesRadio.setAutoscrolls(true);

        noRadio.setBackground(new java.awt.Color(255, 255, 204));
        acGroup.add(noRadio);
        noRadio.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        noRadio.setText("NO");
        noRadio.setAutoscrolls(true);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(yesRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(noRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yesRadio)
                    .addComponent(noRadio))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout modificationPanelLayout = new javax.swing.GroupLayout(modificationPanel);
        modificationPanel.setLayout(modificationPanelLayout);
        modificationPanelLayout.setHorizontalGroup(
            modificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modificationPanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(modificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(roomNumField, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(typeCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addGroup(modificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(roomPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(floorCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(59, 59, 59)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        modificationPanelLayout.setVerticalGroup(
            modificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modificationPanelLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(modificationPanelLayout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(modificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(modificationPanelLayout.createSequentialGroup()
                        .addGroup(modificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(modificationPanelLayout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(roomNumField, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(roomPriceField))
                        .addGap(18, 18, 18)
                        .addGroup(modificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(typeCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(floorCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        searchButton.setBackground(new java.awt.Color(255, 204, 102));
        searchButton.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        searchButton.setForeground(new java.awt.Color(255, 255, 255));
        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        titleLabel.setBackground(new java.awt.Color(204, 0, 255));
        titleLabel.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(255, 204, 102));
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Hotel Information System");

        priceField.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        priceField.setText(" Enter Price");
        priceField.setBorder(null);
        priceField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceFieldActionPerformed(evt);
            }
        });

        typeCombo.setBackground(new java.awt.Color(255, 204, 102));
        typeCombo.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        typeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Room Type", "Standard ", "Couple", "Family", "Suite", "Deulxe" }));
        typeCombo.setBorder(null);
        typeCombo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        typeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeComboActionPerformed(evt);
            }
        });

        roomInfo.setBackground(new java.awt.Color(204, 204, 204));
        roomInfo.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        roomInfo.setForeground(new java.awt.Color(51, 51, 51));
        roomInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Room No", "Room Type", "Price", "Air Conditioner", "Floor"
            }
        ));
        roomInfo.setGridColor(new java.awt.Color(51, 0, 51));
        roomInfo.setShowGrid(true);
        jScrollPane1.setViewportView(roomInfo);
        if (roomInfo.getColumnModel().getColumnCount() > 0) {
            roomInfo.getColumnModel().getColumn(0).setPreferredWidth(20);
        }

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/hotel.png"))); // NOI18N

        resetButton.setBackground(new java.awt.Color(255, 204, 102));
        resetButton.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        resetButton.setForeground(new java.awt.Color(255, 255, 255));
        resetButton.setText("Reset Table");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(typeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 998, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modificationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(50, Short.MAX_VALUE))
            .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(typeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(modificationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        fileMenu.setText("File");

        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);
        fileMenu.add(jSeparator1);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText("Help");
        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        // TODO add your handling code here:
         WindowEvent winCloseEvent = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winCloseEvent);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void typeCombo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeCombo1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeCombo1ActionPerformed

    private void typeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeComboActionPerformed
        // TODO add your handling code here: 
        ArrayList<String> category_result = new ArrayList<>();
        String selected_category =(String) typeCombo.getSelectedItem(); //gets the category selected by the user
        String check_category;
        //Checks if the user has clicked the combobox multiple times
        if(combobox_repeat == false){   //Only runs the code on the first click
        //Adds all the table data into Arraylist    
        for(int i=0;i<roomInfo.getRowCount();i++){   
            for(int j=0;j<roomInfo.getColumnCount();j++){
                table_data.add((String) roomInfo.getValueAt(i, j));
            }    
        }
        }
        //search the table_data ArrayList for details of rooms according to category selected by user
        for(int i=1;i<table_data.size();i=i+5){
                         check_category = table_data.get(i);      //checks the category of the room                 
                            if (check_category.equals(selected_category)){  // adds the details of the hotel room into an ArrayList if categories match
                            category_result.add(table_data.get(i-1));
                            category_result.add(table_data.get(i));
                            category_result.add(table_data.get(i+1));
                            category_result.add(table_data.get(i+2));
                            category_result.add(table_data.get(i+3));
                            }
            }
                        //Empties the table
                        model.setRowCount(0);
                        
                        //Adds the required room details into the table
                        for(int a=0;a<category_result.size();a=a+5){   
                            model.insertRow(0, new Object[] {category_result.get(a),category_result.get(a+1),category_result.get(a+2),category_result.get(a+3),category_result.get(a+4)});
                        }  
            JOptionPane.showMessageDialog(rootPane, "There are "+category_result.size()/5+ " rooms available.The details of the room are displayed in the table below.", userType, HEIGHT);
        combobox_repeat = true;
    }//GEN-LAST:event_typeComboActionPerformed

    private void floorComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_floorComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_floorComboActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // TODO add your handling code here:
        openFile(userType);
       
        
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
//                                                  
//        // TODO add your handling code here:           
     boolean validate= true;
        int target=0;
        try{
            target = Integer.parseInt(priceField.getText()); //Gets the price input by the user
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(rootPane, "Please enter a numeric value.", userType, HEIGHT);
            validate = false;
        }
        int min=0;
         //Checks if the user has clicked the search button multiple times
        if (search_repeat==false){
            for(int i=0;i<roomInfo.getRowCount();i++){  
                String get_price = (String) roomInfo.getValueAt(i, 2);  //Stores only the price of the room into an arraylist
                price.add(Integer.parseInt(get_price));  
                for(int j=0;j<roomInfo.getColumnCount();j++){
                    table_data.add((String) roomInfo.getValueAt(i, j)); //Stores the details of the room into an arraylist
                }    
            }
           
            //sort table_data arraylist according to price using selection sort
            for(int i=2;i<table_data.size()-1;i=i+5){
                    min = i;
                        for(int b=i+5;b<table_data.size();b=b+5){
                            if (Integer.parseInt(table_data.get(min)) > Integer.parseInt(table_data.get(b))){
                                Collections.swap(table_data, min-2, b-2);
                                Collections.swap(table_data, min-1, b-1);
                                Collections.swap(table_data, min, b);
                                Collections.swap(table_data, min+1, b+1);
                                Collections.swap(table_data, min+2, b+2);
                                min=min+5;
                            }
                        }  
            }
            //sort price arraylist using selection sort
            for(int i=0;i<price.size()-1;i++){
                min = i;
                for(int j=i+1;j<price.size();j++){
                    if (price.get(j)<price.get(min)){
                        min=j;
                        Collections.swap(price, i, min);
                    }
                }  
            }
        }
        if (validate == true && price.contains(target)){
                //Performs binary search on the price arraylist for the price input by the user
                int output = binarySearch(price, 0, price.size(), target);  //returns the index of the selected price
                int index=((output+1)*5)-3; //returns the index of the price in the table_data arraylist
                model.setRowCount(0);   //Empties the table
                
                //Add the data of the room with the searched price
                model.insertRow(0, new Object[] {table_data.get(index-2),table_data.get(index-1),table_data.get(index),table_data.get(index+1),table_data.get(index+2)});
                JOptionPane.showMessageDialog(rootPane, "A room is available for the price.The details of the room is displayed in the table below.", userType, HEIGHT);
        }else if(validate == true && price.contains(target)==false){
            JOptionPane.showMessageDialog(rootPane, "There are no rooms available for the price", userType, HEIGHT);
        }       
                search_repeat = true;
    }//GEN-LAST:event_searchButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
         // TODO add your handling code here:
         String roomPrice = null,roomNum = null ;
        int rowCount = roomInfo.getRowCount();
        
        try{
         int roomNumInt = Integer.parseInt(roomNumField.getText());
         int roomPriceInt = Integer.parseInt(roomPriceField.getText());
         
         roomNum = String.valueOf(roomNumInt);
         roomPrice = String.valueOf(roomPriceInt);
        }
        catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(rootPane, "Please enter a number for room number and price", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        
        String roomType = (String) typeCombo1.getSelectedItem();
        String ac = null ;
        if(yesRadio.isSelected()){
            ac = "YES";
        }
        else {
            ac = "NO";
        }
       
        String floor = (String) floorCombo.getSelectedItem();
        String[] rowValues = {roomNum, roomType, roomPrice, ac, floor};

        //To check if the user has left out a field
        for (String data : rowValues) {
            if (data.equals("")) {
                JOptionPane.showMessageDialog(rootPane, "There seems to be a empty field");
                return;
            }
        }
        // to make the user unable to select the first value of combo ie "Please Select Floor and Room Type"
        if(typeCombo1.getSelectedIndex() == 0 || floorCombo.getSelectedIndex() == 0){
             JOptionPane.showMessageDialog(rootPane, "Please Select A Floor and a Room Type");
        }

        //duplicate data validation
        for (int i = 0; i < rowCount; i++) {
            String checkRoomNum = (String) roomInfo.getValueAt(i, 0);

            if (checkRoomNum.equals(roomNum)) {
                JOptionPane.showMessageDialog(rootPane, "Duplicate Room Number");
                return;
            }
           
        }

        //adding data to table
        newRow();
        for (int i = 0; i < roomInfo.getColumnCount(); i++) {
            roomInfo.setValueAt(rowValues[i], rowCount, i);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        String fileName = JOptionPane.showInputDialog("Enter The name of file you want to save:");
        
        if(fileName ==""){
        JOptionPane.showMessageDialog(rootPane, "Please enter a name", "Error", JOptionPane.ERROR_MESSAGE);
    }
        else if(fileName == null){
            return;
        }
        try{
            File file = new File("Resource/"+fileName+".csv");
            PrintWriter pw = new PrintWriter(file);
            StringBuilder sb = new StringBuilder();
            int rowCount = roomInfo.getRowCount();
            
            sb.append("Room Number");
            sb.append(",");
            sb.append("Room Type");
            sb.append(",");
            sb.append("Price");
            sb.append(",");
            sb.append("Air Conditioner");
            sb.append(",");
            sb.append("Floor");
            sb.append("\n");
            
            for(int i = 0; i< rowCount; i++){
                for (int j = 0; j < 5; j++){
                    sb.append(roomInfo.getValueAt(i,j).toString());
                    if(j == 4){
                        sb.append("\n");
                    }
                    else{
                       sb.append(","); 
                    }
                    
                }
            }
            pw.write(sb.toString());
            pw.close();
            JOptionPane.showMessageDialog(rootPane, "Saved Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                    
            
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, "Something Went Wrong:"+e, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        int rowCount = roomInfo.getRowCount();
        int i = -1;
        String roomNum = roomNumField.getText();
        for ( int j = 0; j < rowCount; j++){
            String checkRoomNum =(String)roomInfo.getValueAt(j,0);
            if( checkRoomNum.equals(roomNum)){
                i = j;
                break;
            }
        }
        if(i == -1){
            JOptionPane.showMessageDialog(rootPane, "There is no room number "+ roomNum);
        }
        else{
         DefaultTableModel tableModel = (DefaultTableModel) roomInfo.getModel();
        tableModel.removeRow(i);
        JOptionPane.showMessageDialog(rootPane, "Row Deleted "+ roomNum);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // TODO add your handling code here:
        int output = 0;
        if(userType=="admin"){
            output = JOptionPane.showConfirmDialog(rootPane, "Unsaved changes will be lost, are you sure?");
        }
        if(output == 0){
        openFile("user");
        }
        else{
            return;
        }
    }//GEN-LAST:event_resetButtonActionPerformed

    private void priceFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceFieldActionPerformed

     public void newRow() {
        DefaultTableModel tableModel = (DefaultTableModel) roomInfo.getModel();
        tableModel.addRow(new Object[]{null});
    }
    
    private static void merge(int [] first, int [] second, int[] a){
        int iFirst = 0;
        int iSecond = 0;
        int j = 0;
        
        while(iFirst < first.length && iSecond < second.length)
        {
            if (first[iFirst] < second[iSecond])
            {
                a[j] = first[iFirst];
                iFirst++;
            }
            else{
                a[j] = second[iSecond];
                iSecond++;
            }
            j++;
        }
        while (iFirst <first.length){
            a[j] = first[iFirst];
            iFirst++; j++;
        }
        while(iSecond < second.length)
        {
            a[j] = second[iSecond];
            iSecond++; j++;
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HotelInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HotelInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HotelInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HotelInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HotelInfo().setVisible(true);
            }
        });
    }
    
     public int binarySearch(ArrayList<Integer> price_list, int low, int high, int target_value){
       
        int mid = (low+high)/2;
        if(low>high){
            return -1;
        }
        if(price_list.get(mid).equals(target_value)){
            System.out.println(price_list.get(mid));
            //model.setRowCount(0);
            //JOptionPane.showMessageDialog(rootPane, "The available room is " + price_list.get(mid));
            
            return mid;
            
        }else if(target_value<price_list.get(mid)){
            return binarySearch(price_list, low, mid-1, target_value);
        }else{
            return binarySearch(price_list, mid+1, high, target_value);
        }
        
     }
    
    public void openFile(String userType){
        File file = null;
        if(userType == "admin"){
         //JFileChooser opens the window for choosing files
        JFileChooser chooseWindow = new JFileChooser();
        //FileFilter filters out the file types as specified as arguments
        FileFilter filter = new FileNameExtensionFilter("files","csv","txt");
        chooseWindow.showOpenDialog(null);
        //File is used to retrieve the selected file
        file = chooseWindow.getSelectedFile();
        String filePath = file.getAbsolutePath();
        }
        else{
           file = new File("Resource/tabledata.csv");
        }
        // bufferedReader reads the lines and then is inserted into the table
        try {
            BufferedReader br = new BufferedReader(new FileReader(file));
            String firstLine = br.readLine().trim();
            String[] columnsName = firstLine.split(",");
            DefaultTableModel model = (DefaultTableModel) roomInfo.getModel();
            model.setColumnIdentifiers(columnsName);
            
            Object[] tableLines = br.lines().toArray();
            
            for(int i = 0; i < tableLines.length; i++){
                String line = tableLines[i].toString().trim();
                String[] dataRow = line.split(",");
                model.addRow(dataRow);
            }
        }
        catch (IOException ex) {
            Logger.getLogger(HotelInfo.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch(Exception ex){
            
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup acGroup;
    private javax.swing.JButton addButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JComboBox<String> floorCombo;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel modificationPanel;
    private javax.swing.JRadioButton noRadio;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JTextField priceField;
    private javax.swing.JButton resetButton;
    private javax.swing.JTable roomInfo;
    private javax.swing.JTextField roomNumField;
    private javax.swing.JTextField roomPriceField;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JComboBox<String> typeCombo;
    private javax.swing.JComboBox<String> typeCombo1;
    private javax.swing.JRadioButton yesRadio;
    // End of variables declaration//GEN-END:variables
}
